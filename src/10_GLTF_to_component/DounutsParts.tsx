/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef } from "react";
import { type Mesh } from "three";

export function DonutsParts(props: any) {
  const { nodes, materials } = useGLTF("/models/my_donut/donuts-c-2.glb");

  const chockolateRef = useRef<Mesh>(null);

  useFrame((_, delta) => {
    if (chockolateRef.current) {
      chockolateRef.current.rotation.z += delta;
    }
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Plate.geometry}
        material={materials.plate}
        position={[0.07452, 0.07503, 0.02073]}
        rotation={[0.00077, -0.0853, 0.00833]}
        scale={0.96156}
      />
      {/* I've hide sprinkles */}
      {/* <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Sprinkle.geometry}
        material={materials.Sprinkles}
        position={[-0.1906, 0.03317, -0.01008]}
      />
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Cylinder.geometry}
        material={materials.Sprinkles}
        position={[-0.18496, 0.03623, -0.01056]}
      />
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Cylinder001.geometry}
        material={materials.Sprinkles}
        position={[-0.18144, 0.03623, -0.00967]}
      />
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Cylinder002.geometry}
        material={materials.Sprinkles}
        position={[-0.17741, 0.03623, -0.0086]}
      />
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Cylinder003.geometry}
        material={materials.Sprinkles}
        position={[-0.17164, 0.03623, -0.0086]}
      /> */}
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut.geometry}
        material={materials["Material.001"]}
        position={[0.00825, 0.09302, -0.00615]}
        rotation={[0.00077, -0.0853, 0.00833]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing.geometry}
          material={materials["blue icing"]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut001.geometry}
        material={materials["Material.001"]}
        position={[0.13714, 0.09409, 0]}
        rotation={[-0.01982, 1.17549, 0.02154]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing001.geometry}
          material={materials["pink icing"]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut002.geometry}
        material={materials["Material.001"]}
        position={[0.12577, 0.13814, -0.00053]}
        rotation={[3.1391, 0.16514, -3.10081]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing003.geometry}
          material={materials["blue icing"]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut003.geometry}
        material={materials["Material.001"]}
        position={[0.13567, 0.18139, 0.00068]}
        rotation={[0.01791, 0.13106, -0.07937]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing004.geometry}
          material={materials["yellow icing"]}
        />
      </mesh>
      <mesh
        ref={chockolateRef}
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut004.geometry}
        material={materials["Material.001"]}
        position={[0.14826, 0.4, -0.00617]}
        rotation={[0.07399, 0.54987, -0.07888]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing005.geometry}
          material={materials["chockolate icing"]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut005.geometry}
        material={materials["Material.001"]}
        position={[-0.00377, 0.13362, -0.00903]}
        rotation={[-0.07358, -0.44995, -0.01723]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing006.geometry}
          material={materials["white chockolate icing"]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut006.geometry}
        material={materials["Material.001"]}
        position={[0.01038, 0.17636, -0.02083]}
        rotation={[0.19804, -1.46528, 0.27953]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing007.geometry}
          material={materials["pink icing"]}
        />
      </mesh>
      <mesh
        castShadow
        receiveShadow
        // @ts-expect-error geometry
        geometry={nodes.Donut007.geometry}
        material={materials["Material.001"]}
        position={[0.06466, 0.12519, 0.09156]}
        rotation={[-2.44485, -0.24383, 2.74188]}
      >
        <mesh
          castShadow
          receiveShadow
          // @ts-expect-error geometry
          geometry={nodes.Icing008.geometry}
          material={materials["pink icing"]}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/my_donut/donuts-c-2.glb");
